[metadata]
name = termcolor_dg
version = attr: termcolor_dg.__version__
### The following 4 are not supported, moved to setup.py ###
# author = attr: termcolor_dg.__author__
# author_email = attr: termcolor_dg.__email__
# maintainer = attr: termcolor_dg.__maintainer__
# maintainer_email = attr: termcolor_dg.__maintainer_email__
url = https://github.com/gunchev/termcolor_dg/
# download_url = ...
project_urls =
    Source = https://github.com/gunchev/termcolor_dg/
    Bug Tracker = https://github.com/gunchev/termcolor_dg/issues/
    Documentation = https://github.com/gunchev/termcolor_dg/blob/master/README.md

description = ANSI Color formatting for terminal output and log coloring
long_description = file: README.md, CHANGES.md
long_description_content_type = text/markdown
license = MIT
license_files = LICENSE
# https://www.python.org/dev/peps/pep-0345/#platform-multiple-use
platforms = any
# platforms = Linux, Darwin, Windows
test_suite = test
# https://pypi.org/pypi?%3Aaction=list_classifiers
classifiers =
    Development Status :: 5 - Production/Stable
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 3
    Environment :: Console
    Topic :: Terminals
    Topic :: Software Development
    Intended Audience :: Developers


[options]
python_requires = >= 2.7
package_dir =
    = src
py_modules = termcolor_dg
zip_safe = False
# The data files must be specified via the distutilsâ€™ MANIFEST.in file
include_package_data = True
setup_requires =
    setuptools>=41.0
packages = find:
install_requires =

tests_require =
    coverage


[options.packages.find]
where = src


[options.entry_points]
console_scripts =
    termcolor_dg_demo = termcolor_dg:termcolor_demo
    termcolor_dg_demo_log = termcolor_dg:color_log_demo


[bdist_wheel]
universal = true


# 'python setup.py sdist' configuration ###############################################################################
[sdist]
# formats = zip,gztar,bztar,xztar
formats = zip,xztar


# Coverage configuration ##############################################################################################
[coverage:run]
# measure branch coverage, https://coverage.readthedocs.io/en/6.3.1/branch.html#branch
branch = true
command_line = -m unittest discover --verbose -s test
# thread, multiprocessing, gevent, greenlet, eventlet
concurrency = thread
omit =
    test/*
    tests/*


[coverage:report]
# Regexes for lines to exclude from consideration
show_missing = true
skip_covered = false
skip_empty = true
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError
    return NotImplemented

    # Don't complain if non-runnable code isn't run:
    if 0:
    if False:
    if __name__ == .__main__.:
    if typing.TYPE_CHECKING:

    # Don't complain about abstract methods, they aren't run:
    @(abc\.)?abstractmethod
    @(abc\.)?abstractproperty

    # Multiple library version support
    except ImportError


[coverage:html]
directory = htmlcov


[coverage:paths]
source =
    ./src/
